require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/books", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      title: "1984",
      author: "George Orwell",
      genre: "Dystopian",
      isbn: "9780451524935",
      total_copies: 5
    }
  }

  let(:invalid_attributes) {
    {
      title: nil,
      author: "George Orwell",
      genre: "Dystopian",
      isbn: "9780451524935",
      total_copies: 5
    }
  }

  let(:librarian) { Librarian.create!(email: "librarian@example.com", password: "password") }

  let(:token) {
    JWT.encode({ librarian_id: librarian.id }, Rails.application.credentials.secret_key_base)
  }

  let(:valid_headers) {
    { "Authorization" => "Bearer #{token}" }
  }

  shared_examples "index" do
    it "renders a successful response" do
      Book.create! valid_attributes
      get "/v1/books", headers: valid_headers, as: :json
      expect(response).to have_http_status(expected_http_status)
    end
  end


  shared_examples "show" do
    it "renders a successful response" do
      book = Book.create! valid_attributes
      get "/v1/books/#{book.id}", headers: valid_headers, as: :json
      expect(response).to have_http_status(expected_http_status)
    end
  end

  shared_examples "create" do
    context "with valid parameters" do
      it "creates a new Book" do
        expect {
          post "/v1/books",
               params: { book: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Book, :count).by(created_count_book)
      end

      it "renders a JSON response with the new book" do
        post "/v1/books",
             params: { book: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(http_status_valid_parameters)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Book" do
        expect {
          post "/v1/books",
               params: { book: invalid_attributes }, as: :json
        }.to change(Book, :count).by(0)
      end

      it "renders a JSON response with errors for the new book" do
        post "/v1/books",
             params: { book: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(http_status_invalid_parameters)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  shared_examples "update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          title: "Chronicles of Narnia",
          author: "C.S. Lewis",
          genre: "Fantasy",
          isbn: "9780547249650",
          total_copies: 6
        }
      }

      it "updates the requested book" do
        book = Book.create! valid_attributes
        patch "/v1/books/#{book.id}",
              params: { book: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(http_status_valid_parameters)
        if http_status_valid_parameters == :ok
          book.reload
          expect(book.title).to eq("Chronicles of Narnia")
          expect(book.author).to eq("C.S. Lewis")
          expect(book.genre).to eq("Fantasy")
          expect(book.isbn).to eq("9780547249650")
          expect(book.total_copies).to eq(6)
        end
      end

      it "renders a JSON response with the book" do
        book = Book.create! valid_attributes
        patch "/v1/books/#{book.id}",
              params: { book: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(http_status_valid_parameters)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the book" do
        book = Book.create! valid_attributes
        patch "/v1/books/#{book.id}",
              params: { book: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(http_status_invalid_parameters)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  shared_examples "destroy" do
    it "destroys the requested book" do
      book = Book.create! valid_attributes
      expect {
        delete "/v1/books/#{book.id}", headers: valid_headers, as: :json
      }.to change(Book, :count).by(deleted_count_book)
    end

  end

  context "when no one is logged in" do
    let(:valid_headers) { {} }

    describe "GET /index" do
      let(:expected_http_status) { :ok }
      include_examples "index"

      context "when query string is provided" do

        let!(:books) do
          [
            FactoryBot.create(:book, title: "Book 1"),
            FactoryBot.create(:book, title: "Book 2 a"),
            FactoryBot.create(:book, title: "Book 2 b"),
            FactoryBot.create(:book, title: "Book 3"),
            FactoryBot.create(:book, author: "Author 1"),
            FactoryBot.create(:book, author: "Author 2"),
            FactoryBot.create(:book, author: "Author 3"),
            FactoryBot.create(:book, genre: "Genre 1"),
            FactoryBot.create(:book, genre: "Genre 2"),
            FactoryBot.create(:book, genre: "Genre 3"),
          ]
        end
        context "when query string is 'book 2'" do
          let(:params) { {q: "book 2"} }
          it "returns books matching search criteria" do
            get "/v1/books?#{params.to_query}", headers: valid_headers, as: :json
            expect(response).to have_http_status(expected_http_status)
            expect(JSON.parse(response.body).map { |b| b["title"] }).to match_array(["Book 2 a", "Book 2 b"])
          end
        end
        context "when query string is 'genre'" do
          let(:params) { {q: "genre"} }
          it "returns books matching search criteria" do
            get "/v1/books?#{params.to_query}", headers: valid_headers, as: :json
            expect(response).to have_http_status(expected_http_status)
            expect(JSON.parse(response.body).map { |b| b["genre"] }).to match_array(["Genre 1", "Genre 2", "Genre 3"])
          end
        end
        context "when query string is 'author 2'" do
          let(:params) { {q: "author 2"} }
          it "returns books matching search criteria" do
            get "/v1/books?#{params.to_query}", headers: valid_headers, as: :json
            expect(response).to have_http_status(expected_http_status)
            expect(JSON.parse(response.body).map { |b| b["author"] }).to match_array(["Author 2"])
          end
        end
      end
    end

    describe "GET /show" do
      let(:expected_http_status) { :ok }
      include_examples "show"
    end

    describe "POST /create" do
      let(:created_count_book) { 0 }
      let(:http_status_valid_parameters) { :unauthorized }
      let(:http_status_invalid_parameters) { :unauthorized }
      include_examples "create"
    end

    describe "PATCH /update" do
      let(:http_status_valid_parameters) { :unauthorized }
      let(:http_status_invalid_parameters) { :unauthorized }
      include_examples "update"
    end

    describe "DELETE /destroy" do
      let(:deleted_count_book) { 0 }
      let(:http_status_valid_parameters) { :unauthorized }
      include_examples "destroy"
    end
  end

  context "when member is logged in" do
    let(:member) { Member.create!(email: "member@example.com", password: "password") }

    let(:token) {
      JWT.encode({ user_id: member.id, user_type: "member" }, Rails.application.credentials.secret_key_base)
    }

    let(:valid_headers) {
      { "Authorization" => "Bearer #{token}" }
    }

    describe "GET /index" do
      let(:expected_http_status) { :ok }
      include_examples "index"
    end

    describe "GET /show" do
      let(:expected_http_status) { :ok }
      include_examples "show"
    end

    describe "POST /create" do
      let(:created_count_book) { 0 }
      let(:http_status_valid_parameters) { :unauthorized }
      let(:http_status_invalid_parameters) { :unauthorized }
      include_examples "create"
    end

    describe "PATCH /update" do
      let(:http_status_valid_parameters) { :unauthorized }
      let(:http_status_invalid_parameters) { :unauthorized }
      include_examples "update"
    end

    describe "DELETE /destroy" do
      let(:deleted_count_book) { 0 }
      let(:http_status_valid_parameters) { :unauthorized }
      include_examples "destroy"
    end
  end

  context "when librarian is logged in" do
    let(:librarian) { Librarian.create!(email: "librarian@example.com", password: "password") }

    let(:token) {
      JWT.encode({ user_id: librarian.id, user_type: "librarian" }, Rails.application.credentials.secret_key_base)
    }

    let(:valid_headers) {
      { "Authorization" => "Bearer #{token}" }
    }


    describe "GET /index" do
      let(:expected_http_status) { :ok }
      include_examples "index"
    end

    describe "GET /show" do
      let(:expected_http_status) { :ok }
      include_examples "show"
    end

    describe "POST /create" do
      let(:created_count_book) { 1 }
      let(:http_status_valid_parameters) { :created }
      let(:http_status_invalid_parameters) { :unprocessable_content }
      include_examples "create"
    end

    describe "PATCH /update" do
      let(:http_status_valid_parameters) { :ok }
      let(:http_status_invalid_parameters) { :unprocessable_content }
      include_examples "update"
    end

    describe "DELETE /destroy" do
      let(:deleted_count_book) { -1 }
      include_examples "destroy"
    end
  end
end
